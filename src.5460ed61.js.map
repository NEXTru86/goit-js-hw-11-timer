{"version":3,"sources":["index.js"],"names":["refs","ClockFace","document","querySelector","ClockFaceDays","ClockFaceHours","ClockFaceMinuts","ClockFaceSeconds","CountdownTimer","selector","targetDate","onTick","setInterval","currentTime","Date","now","time","getTimeComponents","timer","updateClockface","days","hours","mins","secs","textContent","pad","value","String","padStart","Math","floor","start"],"mappings":";;;AAwEC,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAxED,QAAA,oBAEA,IAAMA,EAAO,CACTC,UAAWC,SAASC,cAAc,YAClCC,cAAeF,SAASC,cAAc,uBACtCE,eAAgBH,SAASC,cAAc,wBACvCG,gBAAiBJ,SAASC,cAAc,uBACxCI,iBAAkBL,SAASC,cAAc,wBAGvCK,EA8DL,WA7D+C,SAAA,EAAA,GAA/BC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,OAAS,EAAA,KAAA,GACnCF,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,OAASA,EA0DrB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAvDG,MAAA,WAAQ,IAAA,EAAA,KACJC,YAAY,WACFC,IAAAA,EAAcC,KAAKC,MAEnBC,EAAOC,EADK,EAAKP,WAAaG,GAEpC,EAAKF,OAAOK,IACb,SAiDV,EAAA,GA7CKE,EAAQ,IAAIV,EAAe,CAG7BE,WAAY,IAAII,KAAK,gBACrBH,OAAQQ,IAMZ,SAASA,EAA2C,GAA1BC,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KACzCvB,EAAKI,cAAcoB,YAAiBJ,GAAAA,OAAAA,GACpCpB,EAAKK,eAAemB,YAAiBH,GAAAA,OAAAA,GACrCrB,EAAKM,gBAAgBkB,YAAiBF,GAAAA,OAAAA,GACtCtB,EAAKO,iBAAiBiB,YAAiBD,GAAAA,OAAAA,GAG3C,SAASE,EAAIC,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrC,SAASX,EAAkBD,GAuBhB,MAAA,CAAEI,KAlBIK,EAAII,KAAKC,MAAMd,EAAQ,QAkBrBK,MAZDI,EAAII,KAAKC,MAAOd,EAAQ,MAAyB,OAYzCM,KAPTG,EAAII,KAAKC,MAAOd,EAAQ,KAAoB,MAO7BO,KAFfE,EAAII,KAAKC,MAAOd,EAAQ,IAAc,OAlCvDE,EAAMa","file":"src.5460ed61.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\n\nconst refs = {\n    ClockFace: document.querySelector('#timer-1'),\n    ClockFaceDays: document.querySelector('[data-value=\"days\"]'),\n    ClockFaceHours: document.querySelector('[data-value=\"hours\"]'),\n    ClockFaceMinuts: document.querySelector('[data-value=\"mins\"]'),\n    ClockFaceSeconds: document.querySelector('[data-value=\"secs\"]'),\n};\n\nclass CountdownTimer {\n    constructor({selector, targetDate, onTick}) {\n        this.selector = selector;\n        this.targetDate = targetDate;\n        this.onTick = onTick;\n    }\n\n    start() {\n        setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - currentTime;\n            const time = getTimeComponents(deltaTime);\n            this.onTick(time);\n        }, 1000);\n    };\n}\n\nconst timer = new CountdownTimer({\n    // нихрена не понял как можно повесить значения таймера на весь div контейнер\n    // selector: '#timer-1', через функцию?\n    targetDate: new Date('Jul 17, 2021'),\n    onTick: updateClockface,\n    \n});\n\ntimer.start();\n\nfunction updateClockface({days, hours, mins, secs}) {\n    refs.ClockFaceDays.textContent = `${days}`;\n    refs.ClockFaceHours.textContent = `${hours}`;\n    refs.ClockFaceMinuts.textContent = `${mins}`;\n    refs.ClockFaceSeconds.textContent = `${secs}`;\n};\n\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n};\n\nfunction getTimeComponents(time) {\n    /*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n    const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    /*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    /*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    /*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n};\n"]}